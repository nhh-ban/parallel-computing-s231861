M=df$M[i],
sig=.05)
}
tic(paste0("Parallel loop, ", Cores, " cores"))
res <-
foreach(
i = 1:nrow(df),
.combine = 'rbind',
.packages = c('magrittr', 'dply'),
) %dopar%
df$share_reject[i]
tic(paste0("Parallel loop, ", Cores, " cores"))
res <-
foreach(
i = 1:nrow(df),
.combine = 'rbind',
.packages = c('magrittr', 'dplyr'),
) %dopar%
df$share_reject[i]
tic(paste0("Parallel loop, ", Cores, " cores"))
res <-
foreach(
i = 1:nrow(df),
.combine = 'rbind',
.packages = c('magrittr', 'dplyr'),
) %dopar%
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
# Load "doParallel"
library("doParallel")
View(df)
View(df)
tic(paste0("Parallel loop, ", Cores, " cores"))
res <-
foreach(
i = 1:nrow(df),
.combine = 'rbind',
.packages = c('magrittr', 'dplyr'),
) %dopar%
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
tic(paste0("Parallel loop, ", Cores, " cores"))
res <-
foreach(
i = 1:nrow(df),
.combine = 'rbind',
.packages = c('magrittr', 'dplyr'),
) %dopar%
df$share_reject[i] <-
MTweedieTests
tic(paste0("Parallel loop, ", Cores, " cores"))
res <-
foreach(
i = 1:nrow(df),
.combine = 'rbind',
.packages = c('magrittr', 'dplyr'),
) %dopar%
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
tic(paste0("Parallel loop, ", Cores, " cores"))
res <-
foreach(
i = 1:nrow(df),
.combine = 'rbind',
.packages = c('magrittr', 'dplyr'),
.export = c('df', 'MTweedieTests')
) %dopar%
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
tic(paste0("Parallel loop, ", Cores, " cores"))
res <-
foreach(
i = 1:nrow(df),
.combine = 'rbind',
.packages = c('magrittr', 'dplyr'),
.export = c('df', 'MTweedieTests')
) %dopar%
tibble(
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
)
tic(paste0("Parallel loop, ", Cores, " cores"))
res <-
foreach(
i = 1:nrow(df),
.combine = 'rbind',
.packages = c('magrittr', 'dplyr'),
.export = c('df', 'MTweedieTests')
) %dopar%
tibble(
cbind(df[i, ], share_reject =   MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05) )
)
tic(paste0("Parallel loop, ", Cores, " cores"))
res <-
foreach(
i = 1:nrow(df),
.combine = 'rbind',
.packages = c('magrittr', 'dplyr'),
) %dopar%
tibble(
cbind(df[i, ], share_reject =   MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05) )
)
?cbind
tic(paste0("Parallel loop, ", Cores, " cores"))
res <-
foreach(
i = 1:nrow(df),
.combine = 'rbind',
.packages = c('magrittr', 'dplyr'),
) %dopar% {
cbind(df[i, ], share_reject =   MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05) )
}
tic(paste0("Parallel loop, ", Cores, " cores"))
res <-
foreach(
i = 1:nrow(df),
.combine = 'cbind',
.packages = c('magrittr', 'dplyr'),
) %dopar% {
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
tic(paste0("Parallel loop, ", Cores, " cores"))
res <-
foreach(
i = 1:nrow(df),
.combine = 'cbind',
.packages = c('magrittr', 'dplyr'),
) %dopar% {
df$share_reject[i] =
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
f
do
?d
?help
?print
install.packages("foreach")
install.packages("foreach")
library("foreach")
tic(paste0("Parallel loop, ", Cores, " cores"))
res <-
foreach(
i = 1:nrow(df),
.combine = 'cbind',
.packages = c('magrittr', 'dplyr'),
) %dopar% {
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
tibble(
N=df$N[i],
M=df$M[i],
share_reject =
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
foreach(
tic(paste0("Parallel loop, ", Cores, " cores"))
res <-
foreach(
i = 1:nrow(df),
.combine = 'cbind',
.packages = c('magrittr', 'dplyr'),
) %dopar%
tibble(
N=df$N[i],
M=df$M[i],
share_reject =
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
)
tic(paste0("Parallel loop, ", Cores, " cores"))
results <- foreach(i = 1:nrow(df), .combine = 'c') %dopar% {
MTweedieTests(N = df$N[i], M = df$M[i], sig = 0.05)
}
tic(paste0("Parallel loop, ", Cores, " cores"))
res <- foreach(i = 1:nrow(df), .combine = rbind, .packages = c('magrittr', 'dplyr')) %dopar% {
data.frame(
N = df$N[i],
M = df$M[i],
share_reject = MTweedieTests(N = df$N[i], M = df$M[i], sig = 0.05)
)
}
# Assignment 1:
library(tweedie)
tic(paste0("Parallel loop, ", Cores, " cores"))
res <- foreach(i = 1:nrow(df), .combine = rbind, .packages = c('magrittr', 'dplyr')
) %dopar% {
data.frame(
N = df$N[i],
M = df$M[i],
share_reject =
MTweedieTests(
N = df$N[i],
M = df$M[i],
sig = 0.05)
)
}
tic(paste0("Parallel loop, ", Cores, " cores"))
res <- foreach(i = 1:nrow(df), .combine = rbind, .packages = c('magrittr', 'dplyr', 'rtrweedie')
) %dopar% {
data.frame(
N = df$N[i],
M = df$M[i],
share_reject =
MTweedieTests(
N = df$N[i],
M = df$M[i],
sig = 0.05)
)
}
tic(paste0("Parallel loop, ", Cores, " cores"))
res <- foreach(i = 1:nrow(df), .combine = rbind, .packages = c('magrittr', 'dplyr', 'rtweedie')
) %dopar% {
data.frame(
N = df$N[i],
M = df$M[i],
share_reject =
MTweedieTests(
N = df$N[i],
M = df$M[i],
sig = 0.05)
)
}
tic(paste0("Parallel loop, ", Cores, " cores"))
res <- foreach(i = 1:nrow(df), .combine = rbind, .packages = c('magrittr', 'dplyr', 'tweedie')
) %dopar% {
data.frame(
N = df$N[i],
M = df$M[i],
share_reject =
MTweedieTests(
N = df$N[i],
M = df$M[i],
sig = 0.05)
)
}
stopCluster(cl)
toc(log = TRUE)
tic(paste0("Parallel loop, ", Cores, " cores"))
res <- foreach(i = 1:nrow(df),
.combine = rbind,
# Add the needed
.packages = c('magrittr', 'dplyr', 'tweedie')
) %dopar% {
data.frame(
N = df$N[i],
M = df$M[i],
share_reject =
MTweedieTests(
N = df$N[i],
M = df$M[i],
sig = 0.05)
)
}
tic(paste0("Parallel loop, ", Cores, " cores"))
res <- foreach(i = 1:nrow(df),
.combine = rbind, .packages = c('magrittr', 'dplyr', 'tweedie')
) %dopar% {
data.frame(
N = df$N[i],
M = df$M[i],
share_reject =
MTweedieTests(
N = df$N[i],
M = df$M[i],
sig = 0.05)
)
}
Test_2() %>%
knitr::kable()
tic(paste0("Test_2", Cores, " cores"))
res <- foreach(i = 1:nrow(df),
.combine = rbind, .packages = c('magrittr', 'dplyr', 'tweedie')
) %dopar% {
data.frame(
N = df$N[i],
M = df$M[i],
share_reject =
MTweedieTests(
N = df$N[i],
M = df$M[i],
sig = 0.05)
)
}
Parallel loop, () %>%
Parallel loop() %>%
Parallel loop () %>%
Cores <- min(parallel::detectCores(), maxcores)
# Instantiate the cores - make them work
cl <- makeCluster(Cores)
# Next - register the cluster:
registerDoParallel(cl)
tic(paste0("Test_2", Cores, " cores"))
res <- foreach(i = 1:nrow(df),
.combine = rbind, .packages = c('magrittr', 'dplyr', 'tweedie')
) %dopar% {
data.frame(
N = df$N[i],
M = df$M[i],
share_reject =
MTweedieTests(
N = df$N[i],
M = df$M[i],
sig = 0.05)
)
}
stopCluster(cl)
toc(log = TRUE)
Cores <- min(parallel::detectCores(), maxcores)
# Instantiate the cores - make them work
cl <- makeCluster(Cores)
# Next - register the cluster:
registerDoParallel(cl)
tic(paste0("Test_2", Cores, " cores"))
res <- foreach(i = 1:nrow(df),
.combine = rbind,
# Add packages needed to run the parallel
.packages = c('magrittr', 'dplyr', 'tweedie')
) %dopar%
tibble(
N = df$N[i],
M = df$M[i],
share_reject =
MTweedieTests(
N = df$N[i],
M = df$M[i],
sig = 0.05)
)
# Stop the cluster
stopCluster(cl)
toc(log = TRUE)
TicTocLog() %>%
knitr::kable()
# Clear the tic/toc log
tic.clearlog()
TicTocLog <-
function() {
tic.log() %>%
unlist %>%
tibble(logvals = .) %>%
separate(logvals,
sep = ":",
into = c("Function type", "log")) %>%
mutate(log = str_trim(log)) %>%
separate(log,
sep = " ",
into = c("Seconds"),
extra = "drop")
}
# Clear the tic/toc log
tic.clearlog()
# By using the tic - toc we can calc. the time to run the code
tic("Test_1") # Name the test
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
# log = T -> Push the result in a list
toc(log = TRUE)
# To store the result:
TicTocLog() %>%
knitr::kable()
# Test 1: 49.955 sec elapsed
Cores <- min(parallel::detectCores(), maxcores)
# Instantiate the cores - make them work
cl <- makeCluster(Cores)
# Next - register the cluster:
registerDoParallel(cl)
tic(paste0("Test_2", Cores, " cores"))
res <- foreach(i = 1:nrow(df),
.combine = rbind,
# Add packages needed to run the parallel
.packages = c('magrittr', 'dplyr', 'tweedie')
) %dopar%
tibble(
N = df$N[i],
M = df$M[i],
share_reject =
MTweedieTests(
N = df$N[i],
M = df$M[i],
sig = 0.05)
)
# Stop the cluster
stopCluster(cl)
toc(log = TRUE)
TicTocLog() %>%
knitr::kable()
library(tweedie)
library(ggplot2)
library(lubridate)
library(purrr)
library(forcats)
library(tictoc)
library(tidyverse)
library(doParallel)
library(magrittr)
library(dplyr)
library(foreach)
library(furrr)
library(tweedie)
library(tweedie)
library(ggplot2)
library(lubridate)
library(purrr)
library(forcats)
library(tictoc)
library(tidyverse)
library(doParallel)
library(magrittr)
library(dplyr)
library(foreach)
library(furrr)
library(tweedie)
simTweedieTest <-
function(N){
t.test(
rtweedie(N, mu=10000, phi=100, power=1.9),
mu=10000
)$p.value
}
MTweedieTests <-
function(N,M,sig){
sum(replicate(M,simTweedieTest(N)) < sig)/M
}
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
TicTocLog <-
# Empty function
function() {
# Use functions from tictoc to time the function
tic.log() %>%
# Simplifying the list into a vector
unlist %>%
# Converting the vector into a tibble
tibble(logvals = .) %>%
# Separating the table into to columns
separate(logvals,
sep = ":",
into = c("Function type", "log")) %>%
# Modifying log column by removing unnecessary
mutate(log = str_trim(log)) %>%
# Separating the column log into seconds
separate(log,
sep = " ",
into = c("Seconds"),
extra = "drop")
}
# When fresh start, use clear log
tic.clearlog()
test_1 <- source("scripts/test_1.r")
# Problem 2.1 ----
# Time the original solution script:
test_1 <- source("scripts/test_1.r")
setwd("/Users/daniel/Library/CloudStorage/OneDrive-NorgesHandelshÃ¸yskole/NHH/1.semester/BAN400/Assignments/parallel-computing-s231861")
test_1 <- source("scripts/test_1.r")
# Problem 2.2 ----
# Time the script after rewrite line 29-35 (final loop)
test_2 <- source("scripts/test_2.r")
# Problem 2.3 ----
# Time the script after rewriting MTweedieTests
test_3 <- source("scripts/test_3.r")
TicTocLog() |>
knitr::kable()
